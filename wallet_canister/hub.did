type AddChainArgs = variant {
  BTC : record {
    minter_pid : principal;
    network : Network;
    relayer_pid : principal;
  };
  EVM : record {
    helper_contract : text;
    chain_id : text;
    relayer_pid : principal;
  };
  SUI : record {
    helper_contract : SuiHelperContractAddress;
    relayer_pid : principal;
  };
};
type AddTokenArgs = record {
  pid : principal;
  decimals : nat8;
  transfer_fee : nat;
  name : text;
  native_chain : opt text;
  support_chains : vec record { text; opt text };
  token_type : opt text;
  symbol : text;
};
type AddTokenChainArgs = record {
  pid : principal;
  token_address : opt text;
  chain_id : text;
};
type ApproveError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  AllowanceChanged : record { current_allowance : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  Expired : record { ledger_time : nat64 };
  InsufficientFunds : record { balance : nat };
};
type Assets = record {
  chain_id : text;
  token_pid : principal;
  protocol_fee : nat;
  locked_amount : nat;
};
type BaseFee = record { tx_fee : nat; protocol_fee : opt nat };
type BridgeArgs = record {
  token : principal;
  from_tx_id : opt text;
  recipient : text;
  target_chain_id : text;
  from_address : opt text;
  amount : nat;
};
type BridgeResponse = record { history : History; history_id : nat64 };
type BurnEvent = record { id : text; history : History };
type CachedRelayerEvent = variant {
  BurnEvent : BurnEvent;
  MintEvent : MintEvent;
};
type ChainBitcoin = record {
  minter_pid : principal;
  network : Network;
  chain_id : text;
  relayer_pid : principal;
};
type ChainEVM = record {
  helper_contract : text;
  chain_id : text;
  minter_address : text;
  relayer_pid : principal;
};
type ChainICP = record { chain_id : text };
type ChainSpecificFee = variant { DepositFee : nat64; WithdrawFee : nat64 };
type ChainSui = record {
  helper_contract : text;
  minter_public_key : text;
  chain_id : text;
  minter_address : text;
  relayer_pid : principal;
};
type ChainWithTokenAddress = record {
  token_address : opt text;
  chain_id : text;
};
type ClaimedArg = record { nonce : nat64; event_id : text };
type ExtraLockIds = variant {
  EvmToBtc : record { nat; nat };
  IcpToBtc : record { nat; nat };
};
type Fee = record {
  base_fee : BaseFee;
  chain_specific_fee : opt ChainSpecificFee;
};
type GetHistoryRequest = record {
  status : opt Status;
  evm_address : opt text;
  sui_address : opt text;
  icp_address : opt text;
  limit : nat64;
  start : nat64;
  token_pid : opt principal;
  btc_address : opt text;
};
type GetHistoryResponse = record {
  total : nat64;
  records : vec History;
  next : opt nat64;
};
type History = record {
  fee : opt Fee;
  status : Status;
  to_chain_tx_id : opt text;
  created_at : nat64;
  extra_lock_ids : opt ExtraLockIds;
  to_address : text;
  from_chain_tx_id : opt text;
  to_chain_id : text;
  from_address : text;
  from_chain_id : text;
  icrc_token_lock_id : nat;
  to_chain_nonce : nat64;
  token_pid : principal;
  proof : opt MintProof;
  amount : nat;
  archived_at : opt nat64;
};
type HubError = variant {
  InvalidTokenType : text;
  SignerError : SignerError;
  MintProofAlreadyExist;
  TokenNotSupported;
  Paused;
  InvalidTokenAddress : record { text; text };
  ChainNotSupported;
  AmountCannotCoverBitcoinWithdrawFee;
  InvalidFromAddress : text;
  InvalidFromTxId : text;
  PermissionDenied;
  ApproveError : ApproveError;
  CanisterCallFailed : record { code : int32; message : text };
  AmountTooLow;
  TransferFromError : TransferFromError;
  TokenAlreayExist;
  InvalidRecipient : text;
  RetrieveBtcError : text;
  ChainAlreayExist;
  InvalidHelperContract : text;
  TooManyTransactions;
  SameChain;
};
type InitArgs = record {
  ecdsa_key_name : text;
  protocol_fee_percentage : opt nat16;
  paused : bool;
};
type MintEvent = record { id : text; chain_id : text; nonce : nat64 };
type MintProof = variant { EVM : blob; SUI : blob };
type Network = variant { mainnet; regtest; testnet };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok; Err : HubError };
type Result_1 = variant { Ok : BridgeResponse; Err : HubError };
type Result_2 = variant { Ok : opt nat64; Err : HubError };
type Result_3 = variant { Ok : vec Assets; Err : HubError };
type SignerError = variant {
  Internal : text;
  InvalidPublicKey;
  SigningFailed : record { RejectionCode; text };
};
type Status = variant {
  Claimed;
  Lost;
  Waiting;
  Created;
  Completed;
  Expired;
  Pending;
};
type SuiHelperContractAddress = record {
  target : text;
  mint_proof_id : text;
  supply_bag_id : text;
};
type SupportedChain = variant {
  EVM : ChainEVM;
  ICP : ChainICP;
  SUI : ChainSui;
  Bitcoin : ChainBitcoin;
};
type SupportedToken = record {
  pid : principal;
  decimals : nat8;
  transfer_fee : nat;
  name : text;
  native_chain : text;
  support_chains : vec ChainWithTokenAddress;
  token_type : TokenType;
  symbol : text;
};
type SyncHistoryRequest = record { limit : nat64; start : nat64 };
type SyncHistoryResponse = record { records : vec History; next : opt nat64 };
type TokenType = variant { ICRC1; ICRC2 };
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
service : (InitArgs) -> {
  add_cached_events : (vec CachedRelayerEvent) -> (Result);
  add_chains : (vec AddChainArgs) -> (Result);
  add_token_chain : (AddTokenChainArgs) -> (Result);
  add_tokens : (vec AddTokenArgs) -> (Result);
  bridge : (BridgeArgs) -> (Result_1);
  claimed : (ClaimedArg) -> (Result_2);
  delete_cached_event : (text) -> (Result);
  get_admin : () -> (principal) query;
  get_assets_by_chain_id : (text) -> (Result_3);
  get_assets_by_token_pid : (principal) -> (Result_3);
  get_chain : (text) -> (opt SupportedChain) query;
  get_histories : (GetHistoryRequest) -> (GetHistoryResponse) query;
  get_minter_address_of_chain : (text) -> (opt text) query;
  get_protocol_fee_percentage : () -> (opt nat16) query;
  get_support_chains : () -> (vec SupportedChain) query;
  get_support_tokens : () -> (vec SupportedToken) query;
  pause : () -> (Result);
  resume : () -> (Result);
  set_protocol_fee_percentage : (nat16) -> (Result);
  sync_histories : (SyncHistoryRequest) -> (SyncHistoryResponse) query;
  update_chain : (AddChainArgs) -> (Result);
  update_token : (AddTokenArgs) -> (Result);
  update_token_chain_address : (AddTokenChainArgs) -> (Result);
}
